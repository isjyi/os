basePath: /api
definitions:
  DictData:
    properties:
      create_by:
        description: 创建者
        type: integer
      createdAt:
        type: integer
      dataScope:
        type: string
      deletedAt:
        type: integer
      dict_type_id:
        description: 字典类型
        type: integer
      id:
        type: integer
      is_default:
        description: 默认
        type: integer
      label:
        description: 数据标签
        type: string
      params:
        type: string
      remark:
        description: 备注
        type: string
      sort:
        description: 显示顺序
        type: integer
      status:
        description: 状态
        type: integer
      update_by:
        description: 更新者
        type: integer
      updatedAt:
        type: integer
      value:
        description: 数据键值
        type: integer
    type: object
  InfoResponse:
    properties:
      avatar:
        description: 头像
        type: string
      name:
        description: 昵称
        type: string
      permissions:
        description: 角色权限
        items:
          type: string
        type: array
      roles:
        description: 角色名称
        items:
          type: string
        type: array
      userId:
        description: id
        type: integer
      userName:
        description: 手机号
        type: string
    type: object
  Login:
    properties:
      code:
        description: 验证码
        type: string
      password:
        description: 密码
        type: string
      phone:
        description: 手机号
        type: string
      uuid:
        description: 验证码唯一id
        type: string
    required:
    - code
    - password
    - phone
    - uuid
    type: object
  Menu:
    properties:
      action:
        description: 请求方式
        type: string
      children:
        items:
          $ref: '#/definitions/Menu'
        type: array
      component:
        description: 组件路径
        type: string
      create_by:
        description: 创建者
        type: string
      createdAt:
        type: integer
      deletedAt:
        type: integer
      icon:
        description: 菜单图标
        type: string
      id:
        description: id
        type: integer
      is_frame:
        description: 是否外链
        type: integer
      menu_type:
        description: 菜单类型
        type: integer
      name:
        description: 菜单名称
        type: string
      no_cache:
        description: 缓存
        type: integer
      parent_id:
        description: 菜单父级id
        type: integer
      path:
        description: 路由地址
        type: string
      paths:
        description: 层级顺序
        type: string
      permission:
        description: 页面权限标识
        type: string
      permission_id:
        description: 菜单对应权限id
        type: integer
      sort:
        description: 排序
        type: integer
      title:
        description: 菜单标题
        type: string
      update_by:
        description: 修改者
        type: string
      updatedAt:
        type: integer
      visible:
        description: 菜单状态
        type: integer
    type: object
  Register:
    properties:
      code:
        description: 验证码
        type: string
      nickname:
        description: 用户昵称
        type: string
      passwrod:
        description: 密码
        type: string
      phone:
        description: 手机号
        type: string
      uuid:
        description: 验证码唯一id
        type: string
    required:
    - code
    - passwrod
    - phone
    - uuid
    type: object
  Response:
    properties:
      code:
        description: 代码
        example: 200
        type: integer
      data:
        description: 数据集
        type: object
      msg:
        description: 消息
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: zhangbiao19931203@gmail.com
    name: OS API
  description: This is a sample server celler server.
  title: OS Example API
  version: "1.0"
paths:
  /api/v1/dict/databytype/{type_id}:
    get:
      description: 获取JSON
      parameters:
      - description: type_id
        in: path
        name: type_id
        required: true
        type: integer
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/DictData'
                  type: array
              type: object
      security:
      - Bearer: []
      summary: 通过字典类型id获取字典数据
      tags:
      - 字典数据
  /api/v1/menurole:
    get:
      description: 获取JSON
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/Menu'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Response'
      security:
      - Bearer: []
      summary: 根据角色名称获取菜单列表数据（侧边栏使用）
      tags:
      - 菜单
  /api/v1/setting:
    get:
      description: 获取JSON
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      summary: 查询系统信息
      tags:
      - 系统
  /v1/captcha:
    get:
      consumes:
      - application/json
      description: 获取验证码
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200,"data": [...]}'
          schema:
            type: string
      summary: 获取验证码
      tags:
      - 系统
  /v1/info:
    get:
      description: 获取用户信息
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Response'
            - properties:
                data:
                  $ref: '#/definitions/InfoResponse'
              type: object
      security:
      - Bearer: []
      summary: 获取用户信息
      tags:
      - 系统
  /v1/login:
    post:
      consumes:
      - application/json
      description: |-
        获取token
        LoginHandler can be used by clients to get a jwt token.
        Payload needs to be json in the form of {"username": "USERNAME", "password": "PASSWORD"}.
        Reply will be of the form {"token": "TOKEN"}.
        dev mode：It should be noted that all fields cannot be empty, and a value of 0 can be passed in addition to the account password
        注意：开发模式：需要注意全部字段不能为空，账号密码外可以传入0值
      parameters:
      - description: account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        "200":
          description: '{"code": 200, "expire": "2019-08-07T12:45:48+08:00", "token": ".eyJleHAiOjE1NjUxNTMxNDgsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTU2NTE0OTU0OH0.-zvzHvbg0A" }'
          schema:
            type: string
      summary: 登陆
      tags:
      - 系统
  /v1/logout:
    post:
      consumes:
      - application/json
      description: 获取token
      responses:
        "200":
          description: '{"code": 200, "msg": "成功退出系统" }'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 退出登录
      tags:
      - 系统
  /v1/register:
    post:
      consumes:
      - application/json
      description: 用户注册接口
      parameters:
      - description: param
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/Register'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Response'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/Response'
      summary: 用户注册账号
      tags:
      - 系统
  /v1/role:
    get:
      description: 获取JSON
      parameters:
      - description: roleId
        in: path
        name: roleId
        type: string
      responses:
        "200":
          description: '{"code": 200, "data": [...]}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 获取Role数据
      tags:
      - 系统
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
