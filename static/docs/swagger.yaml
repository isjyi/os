basePath: /api
definitions:
  Login:
    properties:
      code:
        description: 验证码
        type: string
      password:
        description: 密码
        type: string
      phone:
        description: 手机号
        type: string
      uuid:
        description: 验证码唯一id
        type: string
    required:
    - code
    - password
    - phone
    - uuid
    type: object
  Register:
    properties:
      code:
        description: 验证码
        type: string
      nickname:
        description: 用户昵称
        type: string
      passwrod:
        description: 密码
        type: string
      phone:
        description: 手机号
        type: string
      uuid:
        description: 验证码唯一id
        type: string
    required:
    - code
    - passwrod
    - phone
    - uuid
    type: object
  app.Response:
    properties:
      code:
        description: 代码
        example: 200
        type: integer
      data:
        description: 数据集
        type: object
      msg:
        description: 消息
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: zhangbiao19931203@gmail.com
    name: OS API
  description: This is a sample server celler server.
  title: OS Example API
  version: "1.0"
paths:
  /api/v1/setting:
    get:
      description: 获取JSON
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      summary: 查询系统信息
      tags:
      - 系统信息
  /v1/captcha:
    get:
      consumes:
      - application/json
      description: 获取验证码
      produces:
      - application/json
      responses:
        "200":
          description: '{"code": 200,"data": [...]}'
          schema:
            type: string
      summary: 获取验证码
      tags:
      - Base
  /v1/info:
    get:
      description: 获取用户信息
      responses:
        "200":
          description: '{"code": 200, "data": [...]}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 获取用户信息
      tags:
      - Base
  /v1/login:
    post:
      consumes:
      - application/json
      description: |-
        获取token
        LoginHandler can be used by clients to get a jwt token.
        Payload needs to be json in the form of {"username": "USERNAME", "password": "PASSWORD"}.
        Reply will be of the form {"token": "TOKEN"}.
        dev mode：It should be noted that all fields cannot be empty, and a value of 0 can be passed in addition to the account password
        注意：开发模式：需要注意全部字段不能为空，账号密码外可以传入0值
      parameters:
      - description: account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        "200":
          description: '{"code": 200, "expire": "2019-08-07T12:45:48+08:00", "token": ".eyJleHAiOjE1NjUxNTMxNDgsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTU2NTE0OTU0OH0.-zvzHvbg0A" }'
          schema:
            type: string
      summary: 登陆
      tags:
      - Base
  /v1/logout:
    post:
      consumes:
      - application/json
      description: 获取token
      responses:
        "200":
          description: '{"code": 200, "msg": "成功退出系统" }'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 退出登录
      tags:
      - Base
  /v1/register:
    post:
      consumes:
      - application/json
      description: 用户注册接口
      parameters:
      - description: param
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/Register'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/app.Response'
      summary: 用户注册账号
      tags:
      - Base
  /v1/role:
    get:
      description: 获取JSON
      parameters:
      - description: roleId
        in: path
        name: roleId
        type: string
      responses:
        "200":
          description: '{"code": 200, "data": [...]}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 获取Role数据
      tags:
      - Base
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
